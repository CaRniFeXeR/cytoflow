<?xml version="1.0" encoding="UTF-8"?>

<!-- FCM transforms XML File -->
    <transforms:Transformation-ML 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:transforms="http://www.isac-net.org/std/Transformation-ML/v1.0/"
        xmlns:mml="http://www.w3.org/1998/Math/MathML"
        xsi:schemaLocation="
            http://www.isac-net.org/std/Transformation-ML/v1.0/  ../../Transformation-ML.v1.0/schema/Transformation-ML.v1.0.xsd
            http://www.w3.org/1998/Math/MathML ../../Transformation-ML.v1.0/mathml2/mathml2.xsd">

	<!-- All the pre-defined transformations are tested here. Each transformation is tested
	     multiple times with different events in order to hit all the cases for each transformation. 
	    
	     For ease, we use a bunch of FCS files which contain only one event, which should be used
	     in the test. All the files contain two parameters (FS, SS) in that order. The name
	     of the file indicates what the event values are:
	       
	       (int | double)-{FS_value}_{SS_value}_test_file.fcs
	     
	     where int or double indicate the datatype of the file.
	     
	     In the comments below root() finds the root of the function given as an argument.
	     That is, the "x" value where the function, f(x) equals 0. However, to follow the
	     standard, we'll use y instead of x (i.e., f(y)).
	     
	     Significant digits are given as calculated. In many cases, they may not be accurate
	     past a certain point (i.e., the 10th decimal place).
	-->

	<!--
	FCS File: int-10_20_test_file.fcs
	  
    root((0.5 * e^(1 * y) - 1.5 * e^(-2 * y) + 2.5) - 10) = 2.708937121
	-->
	<transforms:transformation transforms:newName="Biexponential">
        <transforms:pre-defined>
            <transforms:bi-exponential transforms:a="0.5" transforms:b="1" transforms:c="1.5" transforms:d="2" transforms:f="2.5" transforms:parameter="FS" />
        </transforms:pre-defined>
    </transforms:transformation>
    
    <!--
    Case 1: function root is < 0. (Will evaluate hyperlog with y < 0)
      FCS File: double-(-4.5)_20_test_file.fcs
    
      root((-10^(-y * 3 /1000) + 35 * 3 / 1000 * y - 1) - (-4.5)) = -39.8399952

    Case 2: function root = 0. Boundary case.
      FCS File: int-0_20_test_file.fcs
      
      root((10^(y * 3 /1000) + 35 * 3 / 1000 * y - 1) - 0) = 0

    Case 3: function root > 0. (Will evaluate hyperlog with y > 0)
      FCS File: int-10_20_test_file.fcs
      
      root((10^(y * 3 /1000) + 35 * 3 / 1000 * y - 1) - 10) = 87.34948401
    -->
    <transforms:transformation transforms:newName="Hyperlog">
        <transforms:pre-defined>
            <transforms:hyperlog transforms:b="35" transforms:r="1000" transforms:d="3" transforms:parameter="FS"/>
        </transforms:pre-defined>
    </transforms:transformation>
    
    <!--
    FCS File: int-10_20_test_file.fcs
    
    3 * 10 + 5 = 35
    -->
    <transforms:transformation transforms:newName="Linear">
        <transforms:pre-defined>
            <transforms:linear transforms:a="3.0" transforms:b="5" transforms:parameter="FS"/>
        </transforms:pre-defined>
    </transforms:transformation>
    
    <!--
    Case 1: y < 1
      FCS File: double-0.5_20_test_file.fcs
      
      For all y < 1, 0 is expected
    
    Case 2: y = 1
      FCS File: int-1_20_test_file.fcs
      
      ln(1) * 1000 / 3 = 0
    
    Case 3: y > 1
      FCS File: int-10_20_test_file.fcs
       
      ln(10) * 1000 / 3 = 767.52836433134856133933048489479 
    -->
    <transforms:transformation transforms:newName="Ln">
        <transforms:pre-defined>
            <transforms:ln transforms:parameter="FS" transforms:r="1000" transforms:d="3"/>
        </transforms:pre-defined>
    </transforms:transformation>
    
    <!--
    Case 1: function root is < w. (Will evaluate logicle with y < w)
      FCS File: double-(-4.5)_20_test_file.fcs
    
      root(-(10000 * e^-(10.36 - .48655813) * (e^(.48655813 - y) - (1.5^2) * e^(-(.48655813 - y)/1.5) + 1.5^2 - 1) - (-4.5)) = -1.5983752

    Case 2: function root = w. Boundary case.
      FCS File: int-0_20_test_file.fcs
      
      root((10000 * e^-(10.36 - .48655813) * (e^(y - .48655813) - (1.5^2) * e^(-(y - .48655813)/1.5) + 1.5^2 - 1) - 0) = 0.48655813

    Case 3: function root > w. (Will evaluate locicle with y > w)
      FCS File: int-10_20_test_file.fcs
      
	  root((10000 * e^-(10.36 - .48655813) * (e^(y - .48655813) - (1.5^2) * e^(-(y - .48655813)/1.5) + 1.5^2 - 1) - 10) = 3.403242878
    -->
    <transforms:transformation transforms:newName="Logicle">
        <transforms:pre-defined>
            <transforms:logicle transforms:T="10000" transforms:w=".48655813" transforms:m="10.36" transforms:parameter="FS" />
        </transforms:pre-defined>
    </transforms:transformation>
    
    <!-- Defaults to log in base 10 with no logbase attribute.
    Case 1: y < 1
      FCS File: double-0.5_20_test_file.fcs
      
      For all y < 1, 0 is expected
    
    Case 2: y = 1
      FCS File: int-1_20_test_file.fcs
      
	  log10(1) * 2000 / 5 = 0
		
    Case 3: y > 1
      FCS File: int-10_20_test_file.fcs
       
      log10(10) * 2000 / 5 = 400
    -->
    <transforms:transformation transforms:newName="Log">
        <transforms:pre-defined>
            <transforms:log transforms:parameter="FS"  transforms:r="2000" transforms:d="5"/>
        </transforms:pre-defined>
    </transforms:transformation>
    
    <!-- Defaults to log in base 10 with no logbase attribute.
    Case 1: y < 1
      FCS File: double-0.5_20_test_file.fcs
      
      For all y < 1, 0 is expected
    
    Case 2: y = 1
      FCS File: int-1_20_test_file.fcs
      
	  log17(1) * 400 / 3 = 0
		
    Case 3: y > 1
      FCS File: int-10_20_test_file.fcs
       
      log17(10) * 400 / 3 = 108.3615346
    -->
    <transforms:transformation transforms:newName="Log17">
        <transforms:pre-defined>
            <transforms:log transforms:parameter="FS"  transforms:logbase="17" transforms:r="400" transforms:d="3"/>
        </transforms:pre-defined>
    </transforms:transformation>
    
    <!--
    FCS File: int-10_20_test_file.fcs
    
    3 * 10^2 + 2 * 10 + 1 = 341	
    -->    
    <transforms:transformation transforms:newName="Quadratic">
        <transforms:pre-defined>
            <transforms:quadratic transforms:parameter="FS" transforms:a="3" transforms:b="2" transforms:c="1"/>
        </transforms:pre-defined>
    </transforms:transformation>
    
    <!-- These are the values for the other parameters in the Split Scale transformation as
         given by the standard.       
       b = 64 / 2 = 32
       r = 256 - 64 = 192
       d = 2 * log(e) * 192 / 64 = 2.605766891
       t = 10 ^ (-2 * log(e) * 192 / 64 + log(262144)) = 649.7900106
       a = 64 / (2 * 649.7900106) = 0.049246678
       c = (10 ^ ((0.049246678 * 649.7900106 + 32) * 2.605766891 / 192)) / 649.7900106 = .011371452
    
    Case 1: y < t
      FCS File: int-10_20_test_file.fcs
    
      0.049246678 * 10 + 32 = 32.49246678
      
    Case 2: y < t by a small amount
      FCS File: double-649.5_20_test_file.fcs
      
 	  0.049246678 * 10 + 32 = 32.49246678
 	  
    Case 3: y = t
      FCS File: double-649.7900106_20_test_file.fcs

	  0.049246678 * 649.7900106 + 32 = 64
		 
    Case 4: y > t by a small amount
      FCS File: int-650_20_test_file.fcs
      
      log(.011371452 * 650) * 192 / 2.605766891 = 64.01033961
		
    Case 5: y > t
      FCS File: int-1500_20_test_file.fcs
      
	  log(.011371452 * 1500) * 192 / 2.605766891 = 90.77027638
    -->    
    <transforms:transformation transforms:newName="SplitScale">
        <transforms:pre-defined>
            <transforms:split-scale transforms:r="192" transforms:maxValue="262144" transforms:transitionChannel="64" transforms:parameter="FS"/>
        </transforms:pre-defined>
    </transforms:transformation>

</transforms:Transformation-ML>