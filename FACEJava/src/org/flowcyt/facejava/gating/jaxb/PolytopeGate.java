//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.2-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.08.17 at 04:08:13 PM PDT 
//


package org.flowcyt.facejava.gating.jaxb;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * 
 * 				Type of the PolytopeGate element:
 * 				
 * 				A polytope is the generalization to any dimension of a polygon in two dimensions. Within this specification, 
 * 				a polytope gate is always a convex polytope. In two dimensions a planar polygon is convex if it contains 
 * 				all the line segments connecting any pair of its points.
 * 				
 * 				There is at least one dimension to be specified. Each dimension is described by a dimension element 
 * 				(subelement of the PolytopeGate element). Specified dimensions create the space in which the polytope is 
 * 				created. Each dimension element specifies an FCS parameter by the parameter attribute.
 * 				
 * 				At least 1 point element (subelement of the PolytopeGate element) follows after the dimension subelements. 
 * 				The resulting polytope gate is defined as the convex hull of all the specified points. 
 * 				
 * 				Each point element includes coordinate subelements, each of which specifies a coordinate of the point in space 
 * 				by a value attribute. The first coordinate corresponds to the first dimension (FCS parameter) specified, the second 
 * 				coordinate corresponds to the second dimension (FCS parameter) specified, etc. The number of coordinate 
 * 				elements specified for one point element shall correspond to the number of dimension elements at the beginning
 * 				of the PolytopeGate definition. 
 * 				
 * 				The order of the points is not important, the convex hull (and thus also the polytope gate) remains identical 
 * 				while changing the order of specified points.
 * 				
 * 				The boundaries are considered to be inclusive, i.e., a single event falling on a boundary of the polytope is 
 * 				considered to be in the gate.
 * 				
 * 				Parameters may be transformed.
 * 			
 * 
 * <p>Java class for PolytopeGate complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PolytopeGate">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.isac-net.org/std/Gating-ML/v1.1/}AbstractGate">
 *       &lt;sequence>
 *         &lt;element name="dimension" type="{http://www.isac-net.org/std/Gating-ML/v1.1/}Dimension" maxOccurs="unbounded"/>
 *         &lt;element name="point" type="{http://www.isac-net.org/std/Gating-ML/v1.1/}Point" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PolytopeGate", propOrder = {
    "dimension",
    "point"
})
public class PolytopeGate
    extends AbstractGate
{

    @XmlElement(required = true)
    protected List<Dimension> dimension;
    @XmlElement(required = true)
    protected List<Point> point;

    /**
     * Gets the value of the dimension property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dimension property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDimension().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Dimension }
     * 
     * 
     */
    public List<Dimension> getDimension() {
        if (dimension == null) {
            dimension = new ArrayList<Dimension>();
        }
        return this.dimension;
    }

    /**
     * Gets the value of the point property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the point property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPoint().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Point }
     * 
     * 
     */
    public List<Point> getPoint() {
        if (point == null) {
            point = new ArrayList<Point>();
        }
        return this.point;
    }

}
