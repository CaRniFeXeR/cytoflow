//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.2-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.08.17 at 04:08:13 PM PDT 
//


package org.flowcyt.facejava.gating.jaxb;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * 
 * 				Type of the PolygonGate element:
 * 				
 * 				There are exactly 2 dimensions that are described by 2 dimension elements (subelement of the PolygonGate element). 
 * 				Those dimensions create the plane in that the polygon is created. Each dimension element specifies an FCS 
 * 				parameter by the parameter attribute.
 * 				
 * 				At least 3 vertex elements (subelement of the PolygonGate element) follow after the dimension subelements. 
 * 				A vertex element represents a single vertex of the polygon. 
 * 				
 * 				Each vertex element includes 2 coordinate subelements, each of which specifies a coordinate of the vertex by a value attribute.
 * 				The first coordinate corresponds to the first dimension (parameter) specified.
 * 				The second coordinate corresponds to the second dimension (parameter) specified.
 * 				
 * 				The polygon is defined by the sequence of at least 3 vertices. The boundaries are drawn between the neighbor 
 * 				vertices and it is imlicitly closed (the last boundary is automatically drawn from the last vertex to the first one).
 * 				
 * 				The boundaries are considered to be inclusive, i.e., a single event falling on an edge of a polygon describing a gate is 
 * 				considered to be in the gate.
 * 				
 * 				Considering simple polygons (polygons, which boundaries do not cross), the set of points in the plane enclosed 
 * 				by a polygon forms the interior of the polygon, the set of points on the polygon itself forms its boundary, and the set of 
 * 				points surrounding the polygon forms its exterior. 
 * 				
 * 				Considering non simple polygons, i.e., polygons crossing boundaries, the alternate filling method is 
 * 				used to define to the interior and the exterior of a polygon. The algorithm involves using a ray, coming from the 
 * 				outside of the polygon, every crossing segment switches filling on or off. The first crossing will always mean that after 
 * 				that the filling of a segment will be on. The segments with filling switched on are creating the interior of a polygon. 
 * 				
 * 				Parameters may be transformed.
 * 			
 * 
 * <p>Java class for PolygonGate complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PolygonGate">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.isac-net.org/std/Gating-ML/v1.1/}AbstractGate">
 *       &lt;sequence>
 *         &lt;element name="dimension" type="{http://www.isac-net.org/std/Gating-ML/v1.1/}Dimension" maxOccurs="2" minOccurs="2"/>
 *         &lt;element name="vertex" type="{http://www.isac-net.org/std/Gating-ML/v1.1/}Point2D" maxOccurs="unbounded" minOccurs="3"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PolygonGate", propOrder = {
    "dimension",
    "vertex"
})
public class PolygonGate
    extends AbstractGate
{

    @XmlElement(required = true)
    protected List<Dimension> dimension;
    @XmlElement(required = true)
    protected List<Point2D> vertex;

    /**
     * Gets the value of the dimension property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dimension property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDimension().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Dimension }
     * 
     * 
     */
    public List<Dimension> getDimension() {
        if (dimension == null) {
            dimension = new ArrayList<Dimension>();
        }
        return this.dimension;
    }

    /**
     * Gets the value of the vertex property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the vertex property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getVertex().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Point2D }
     * 
     * 
     */
    public List<Point2D> getVertex() {
        if (vertex == null) {
            vertex = new ArrayList<Point2D>();
        }
        return this.vertex;
    }

}
