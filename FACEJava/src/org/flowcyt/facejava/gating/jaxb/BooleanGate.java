//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.2-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.08.17 at 04:08:13 PM PDT 
//


package org.flowcyt.facejava.gating.jaxb;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;


/**
 * 
 * 				Type of the BooleanGate element:
 * 				
 * 				A Boolean gate is a gate created based on any other gates using basic Boolean logic operators, i.e., AND, OR, and NOT 
 * 				operators. NOT is considered as a unary operator. The arity of AND and OR operators is considered to be n, n greater 
 * 				or equal 2. The operators have the following semantic:
 * 				
 * 				a)	Consider a gate G created as NOT(G1). An event e is in the gate G if and only if e is not in the gate G1.
 * 				b)	Consider a gate G created as AND(G1, G2, …, Gn), n greater or equal 2.  An event e is in the gate G 
 * 					if and only if e is in all gates Gi.
 * 				c)	Consider a gate G created as OR(G1, G2, …, Gn), n greater or equal 2.  An event e is in the gate G if 
 * 					and only if e is in any of the gates Gi.
 * 				
 * 				Note that the XOR gate is not explicitly supported; however, a XOR gate can be created combining the basic operators, e.g., 
 * 				XOR(A, B) = OR(AND(A, NOT(B)), AND(NOT(A), B)).
 * 				
 * 				There are two possibilities how to specify the operands of Boolean operations. 
 * 				
 * 				a)	It is possible to use the gateReference element with a ref attribute that specifies another gate by 
 * 					its id (the id attribute of a gate defined somewhere else in the file). A gate with the referenced id shall 
 * 					be present in the file, otherwise it is considered as a wrong gate definition. 
 * 				b)	An operand of a Boolean operation may be defined directly within the And/Or/Not element. The same 
 * 					rules apply as while defining any other gate within the XML file on the top level as described by this document.
 * 			
 * 
 * <p>Java class for BooleanGate complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="BooleanGate">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.isac-net.org/std/Gating-ML/v1.1/}AbstractGate">
 *       &lt;sequence>
 *         &lt;choice>
 *           &lt;element name="and" type="{http://www.isac-net.org/std/Gating-ML/v1.1/}TwoAndMoreOperands-BoolGate"/>
 *           &lt;element name="or" type="{http://www.isac-net.org/std/Gating-ML/v1.1/}TwoAndMoreOperands-BoolGate"/>
 *           &lt;element name="not" type="{http://www.isac-net.org/std/Gating-ML/v1.1/}OneOperand-BoolGate"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "BooleanGate", propOrder = {
    "and",
    "or",
    "not"
})
public class BooleanGate
    extends AbstractGate
{

    protected TwoAndMoreOperandsBoolGate and;
    protected TwoAndMoreOperandsBoolGate or;
    protected OneOperandBoolGate not;

    /**
     * Gets the value of the and property.
     * 
     * @return
     *     possible object is
     *     {@link TwoAndMoreOperandsBoolGate }
     *     
     */
    public TwoAndMoreOperandsBoolGate getAnd() {
        return and;
    }

    /**
     * Sets the value of the and property.
     * 
     * @param value
     *     allowed object is
     *     {@link TwoAndMoreOperandsBoolGate }
     *     
     */
    public void setAnd(TwoAndMoreOperandsBoolGate value) {
        this.and = value;
    }

    /**
     * Gets the value of the or property.
     * 
     * @return
     *     possible object is
     *     {@link TwoAndMoreOperandsBoolGate }
     *     
     */
    public TwoAndMoreOperandsBoolGate getOr() {
        return or;
    }

    /**
     * Sets the value of the or property.
     * 
     * @param value
     *     allowed object is
     *     {@link TwoAndMoreOperandsBoolGate }
     *     
     */
    public void setOr(TwoAndMoreOperandsBoolGate value) {
        this.or = value;
    }

    /**
     * Gets the value of the not property.
     * 
     * @return
     *     possible object is
     *     {@link OneOperandBoolGate }
     *     
     */
    public OneOperandBoolGate getNot() {
        return not;
    }

    /**
     * Sets the value of the not property.
     * 
     * @param value
     *     allowed object is
     *     {@link OneOperandBoolGate }
     *     
     */
    public void setNot(OneOperandBoolGate value) {
        this.not = value;
    }

}
