//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.2-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.08.17 at 04:08:13 PM PDT 
//


package org.flowcyt.facejava.gating.jaxb;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * 
 * 				Type of the DecisionTreeGate element:
 * 				
 * 				This form of a gate allows a complete specification of any arbitrary n-dimensional region (whether contiguous or not). 
 * 				A decision tree is stored for the gate; each event is filtered through this tree in order to define whether it is inside or 
 * 				outside of the gate.
 * 				
 * 				Computing decision trees
 * 				The decision tree is a binary tree. Each non-terminal node of the tree specifies a parameter (parameter attribute) 
 * 				used to a particular comparison step, a threshold value (threshold attribute) used to compare the data (appropriate 
 * 				channel value of the event) against, and two other tree nodes to continue the decision processing. The parameter 
 * 				attribute refers to a parameter (a parameter in the FCS file or a transformed parameter).
 * 				
 * 				For a given event the channel value of the specified parameter is compared against the threshold. If it is less than 
 * 				the threshold, then the decision is passed to the “Less Than” node; if the value is greater or equal to the threshold, 
 * 				then the decision is passed to the “Greater Than or Equal” node. 
 * 				
 * 				The “Less Than” node may be either a non-terminal node (described by the nodeLT element) or a terminal leaf 
 * 				node (described by a leafLT element). In case it is a non-terminal node (nodeLT element) the computation 
 * 				continues as described above. In case it is a terminal leaf node the decision is made according the inside 
 * 				attribute of the leafLT element. If the value of the attribute is true, the event is considered to be in the gate. 
 * 				If the value of the attribute is false, the event is considered to be out of the gate.
 * 				
 * 				The same semantic applies for a “Greater Than or Equal” node. It also may be either a non-terminal node 
 * 				(described by the nodeGTE element) or a terminal leaf node (described by a leafGTE element). In case 
 * 				it s a non-terminal node (nodeGTE element) the computation continues as described above. In case it is a 
 * 				terminal leaf node the decision is made according the inside attribute of the leafGTE element. If the value of 
 * 				the attribute is true, the event is considered to be in the gate. If the value of the attribute is false, the event is 
 * 				considered to be out of the gate.
 * 			
 * 
 * <p>Java class for DecisionTreeGate complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DecisionTreeGate">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.isac-net.org/std/Gating-ML/v1.1/}AbstractGate">
 *       &lt;sequence>
 *         &lt;element name="rootNode" type="{http://www.isac-net.org/std/Gating-ML/v1.1/}TreeNode"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DecisionTreeGate", propOrder = {
    "rootNode"
})
public class DecisionTreeGate
    extends AbstractGate
{

    @XmlElement(required = true)
    protected TreeNode rootNode;

    /**
     * Gets the value of the rootNode property.
     * 
     * @return
     *     possible object is
     *     {@link TreeNode }
     *     
     */
    public TreeNode getRootNode() {
        return rootNode;
    }

    /**
     * Sets the value of the rootNode property.
     * 
     * @param value
     *     allowed object is
     *     {@link TreeNode }
     *     
     */
    public void setRootNode(TreeNode value) {
        this.rootNode = value;
    }

}
