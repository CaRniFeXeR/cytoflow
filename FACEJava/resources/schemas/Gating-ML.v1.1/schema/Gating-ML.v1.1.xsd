<?xml version="1.0" encoding="UTF-8"?>
<schema 
	xmlns="http://www.w3.org/2001/XMLSchema"
	xmlns:gating="http://www.isac-net.org/std/Gating-ML/v1.1/"
	xmlns:commontypes="http://www.isac-net.org/std/common-types/v1.0/"
	targetNamespace="http://www.isac-net.org/std/Gating-ML/v1.1/"
	elementFormDefault="qualified" attributeFormDefault="qualified">
	
	<import namespace="http://www.isac-net.org/std/common-types/v1.0/" schemaLocation="../../common/CommonTypes.v1.0.xsd"/>
		
	<annotation>
		<appinfo>Gating-ML: XML Gating  Specification</appinfo>
		<documentation xml:lang="en" source="http://www.flowcyt.org/gating">
			version="1.1"
			date="2006-06-08"
			author="Josef Spidlen"
			
			This XML Schema is a part of the Flow Cytometry Gating standard,  please refer to it for later details.  
			The work is supported by NIH R01 EB-5034.
						
			Gating in flow cytometry is a methodology for sorting and analyzing events.  
			This is quite similar to clustering, employed in many data mining applications. 
			It is required to be a deterministic, optimizable algorithm with the mechanics of 
			the sorter.

			Gate definitions are routinely transferred between contexts, requiring a persistent 
			representation that can be reassembled into a new function algorithm in a new 
			location. That is to say, we can copy and paste gates from one sample to another, 
			applying the old function to a new input.

			This paper is an XML schema for XML documents describing gating. It is a proposal 
			on how to form gate definitions which can facilitate validation, create 
			interchange between different companies' software packages, and to better integrate 
			methods with results in reporting.
		</documentation>
	</annotation>

	<element name="Gating-ML" type="gating:Gating-ML">
		<annotation>
			<documentation xml:lang="en">
				Gating-ML is the main element of an XML corresponding to this schema
			</documentation>
		</annotation>
	</element>
	
	<group name="Gates" id="Gates">
		<annotation>
			<documentation xml:lang="en">
				The group gates include various types of gates.
				Each of the types of gates is derived from the abstract 
			</documentation>
		</annotation>
		<choice>
			<element name="RectangleGate" type="gating:RectangleGate" />
			<element name="PolygonGate" type="gating:PolygonGate" />
			<element name="PolytopeGate" type="gating:PolytopeGate" />
			<element name="EllipsoidGate" type="gating:EllipsoidGate" />
			<element name="BooleanGate" type="gating:BooleanGate" />
			<element name="DecisionTreeGate" type="gating:DecisionTreeGate" />
		</choice>
	</group>
	
	<complexType name="Gating-ML" id="Gating-ML">
		<annotation>
			<documentation xml:lang="en">
				Type of the Gating-ML element:
				
				At least 1 gate from the Gates group is to be specified, no upper limit, choice from the Gates group.
			</documentation>
		</annotation>
		<sequence>
			<group ref="gating:Gates" minOccurs="1" maxOccurs="unbounded" />
		</sequence>
	</complexType>

	<complexType name="AbstractGate" abstract="true" id="AbstractGate" >
		<annotation>
			<documentation xml:lang="en">
				Abstract type to be used as a common parent of all types of gates.
								
				Attributes:
				- id shall be used for reference purposes while specifying any type of gate.
			</documentation>
		</annotation>
		<attribute name="id" type="ID" use="required" id="id" />
	</complexType>
	
	<complexType name="RectangleGate" id="RectangleGate">
		<annotation>
			<documentation xml:lang="en">
				Type of the RectangleGate element:
				
				Each parameter of a rectangular gate shall be described by one dimension element 
				(subelement of the RectangleGate element). 
				The maximum number of dimension elements is unbounded. Each dimension specifies 
				range in the specified FCS parameter (parameter attribute) between the min and max values 
				(specified by min and max attributes). 
				
				If the max attribute is absent, then the range in this parameter is considered as (min, unlimited). 
				If the min attribute is absent, then the range in this parameter is considered as (-unlimited, max). 
				
				The min and max attributes are double numbers.
				
				Parameters may be transformed
				The boundary is considered as MinInclusive-MaxExclusive
				
				"Range Gates": just one dimension element
				"Rectangular Gates": two dimension elements
				"Hyper-rectangular Gates": more than two dimension elements 
			</documentation>
		</annotation>
		<complexContent>
			<extension base="gating:AbstractGate">
				<sequence>
					<element name="dimension" type="gating:RectangleGateDimension" maxOccurs="unbounded" id="dimension" />
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	

	<complexType name="PolygonGate" id="PolygonGate">
		<annotation>
			<documentation xml:lang="en">
				Type of the PolygonGate element:
				
				There are exactly 2 dimensions that are described by 2 dimension elements (subelement of the PolygonGate element). 
				Those dimensions create the plane in that the polygon is created. Each dimension element specifies an FCS 
				parameter by the parameter attribute.
				
				At least 3 vertex elements (subelement of the PolygonGate element) follow after the dimension subelements. 
				A vertex element represents a single vertex of the polygon. 
				
				Each vertex element includes 2 coordinate subelements, each of which specifies a coordinate of the vertex by a value attribute.
				The first coordinate corresponds to the first dimension (parameter) specified.
				The second coordinate corresponds to the second dimension (parameter) specified.
				
				The polygon is defined by the sequence of at least 3 vertices. The boundaries are drawn between the neighbor 
				vertices and it is imlicitly closed (the last boundary is automatically drawn from the last vertex to the first one).
				
				The boundaries are considered to be inclusive, i.e., a single event falling on an edge of a polygon describing a gate is 
				considered to be in the gate.
				
				Considering simple polygons (polygons, which boundaries do not cross), the set of points in the plane enclosed 
				by a polygon forms the interior of the polygon, the set of points on the polygon itself forms its boundary, and the set of 
				points surrounding the polygon forms its exterior. 
				
				Considering non simple polygons, i.e., polygons crossing boundaries, the alternate filling method is 
				used to define to the interior and the exterior of a polygon. The algorithm involves using a ray, coming from the 
				outside of the polygon, every crossing segment switches filling on or off. The first crossing will always mean that after 
				that the filling of a segment will be on. The segments with filling switched on are creating the interior of a polygon. 
				
				Parameters may be transformed.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="gating:AbstractGate">
				<sequence>
					<element name="dimension" type="gating:Dimension" minOccurs="2" maxOccurs="2" />
					<element name="vertex" type="gating:Point2D" minOccurs="3" maxOccurs="unbounded" />
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<complexType name="PolytopeGate" id="PolytopeGate">
		<annotation>
			<documentation xml:lang="en">
				Type of the PolytopeGate element:
				
				A polytope is the generalization to any dimension of a polygon in two dimensions. Within this specification, 
				a polytope gate is always a convex polytope. In two dimensions a planar polygon is convex if it contains 
				all the line segments connecting any pair of its points.
				
				There is at least one dimension to be specified. Each dimension is described by a dimension element 
				(subelement of the PolytopeGate element). Specified dimensions create the space in which the polytope is 
				created. Each dimension element specifies an FCS parameter by the parameter attribute.
				
				At least 1 point element (subelement of the PolytopeGate element) follows after the dimension subelements. 
				The resulting polytope gate is defined as the convex hull of all the specified points. 
				
				Each point element includes coordinate subelements, each of which specifies a coordinate of the point in space 
				by a value attribute. The first coordinate corresponds to the first dimension (FCS parameter) specified, the second 
				coordinate corresponds to the second dimension (FCS parameter) specified, etc. The number of coordinate 
				elements specified for one point element shall correspond to the number of dimension elements at the beginning
				of the PolytopeGate definition. 
				
				The order of the points is not important, the convex hull (and thus also the polytope gate) remains identical 
				while changing the order of specified points.
				
				The boundaries are considered to be inclusive, i.e., a single event falling on a boundary of the polytope is 
				considered to be in the gate.
				
				Parameters may be transformed.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="gating:AbstractGate">
				<sequence>
					<element name="dimension" type="gating:Dimension" maxOccurs="unbounded" />
					<element name="point" type="gating:Point" maxOccurs="unbounded" />
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<complexType name="EllipsoidGate" id="EllipsoidGate">
		<annotation>
			<documentation xml:lang="en">Type of the EllipsoidGate element:
				
				There are at least two dimensions to be specified. Each dimension is described by a dimension element
				(subelement of the EllipsoidGate element). Specified dimensions create the space in which the ellipsoid 
				is created. Each dimension element specifies an FCS parameter by a parameter attribute.
				
				There are exactly two foci described, each by the focus element. For each coordinate of a focus
				point there is a coordinate element having a value attributes. The first coordinate corresponds to the 
				first dimension (parameter) specified. The second coordinate corresponds to the second 
				dimension (parameter) specified, etc.  
				
				The boundaries are considered to be inclusive, i.e., a single event falling on the boundary 
				of an ellipsoid describing a gate is considered to be in the gate. An event e is considered to 
				be in the ellipsoid gate G(F1, F2 , d) if and only if
					||e - F1|| + ||e - F2|| is greater or equal d, 
				where ||e - Fx|| presents the Euclidean distance between the focus Fx and e.
				
				Parameter transformations may be applied.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="gating:AbstractGate">
				<sequence>
					<element name="dimension" type="gating:Dimension" minOccurs="2" maxOccurs="unbounded" />
					<element name="focus" type="gating:Point" minOccurs="2" maxOccurs="2" />
					<element name="distance" type="commontypes:NonNegativeDouble" />
				</sequence>
			</extension>
		</complexContent>
	</complexType>


	<complexType name="DecisionTreeGate" id="DecisionTreeGate">
		<annotation>
			<documentation xml:lang="en">
				Type of the DecisionTreeGate element:
				
				This form of a gate allows a complete specification of any arbitrary n-dimensional region (whether contiguous or not). 
				A decision tree is stored for the gate; each event is filtered through this tree in order to define whether it is inside or 
				outside of the gate.
				
				Computing decision trees
				The decision tree is a binary tree. Each non-terminal node of the tree specifies a parameter (parameter attribute) 
				used to a particular comparison step, a threshold value (threshold attribute) used to compare the data (appropriate 
				channel value of the event) against, and two other tree nodes to continue the decision processing. The parameter 
				attribute refers to a parameter (a parameter in the FCS file or a transformed parameter).
				
				For a given event the channel value of the specified parameter is compared against the threshold. If it is less than 
				the threshold, then the decision is passed to the “Less Than” node; if the value is greater or equal to the threshold, 
				then the decision is passed to the “Greater Than or Equal” node. 
				
				The “Less Than” node may be either a non-terminal node (described by the nodeLT element) or a terminal leaf 
				node (described by a leafLT element). In case it is a non-terminal node (nodeLT element) the computation 
				continues as described above. In case it is a terminal leaf node the decision is made according the inside 
				attribute of the leafLT element. If the value of the attribute is true, the event is considered to be in the gate. 
				If the value of the attribute is false, the event is considered to be out of the gate.
				
				The same semantic applies for a “Greater Than or Equal” node. It also may be either a non-terminal node 
				(described by the nodeGTE element) or a terminal leaf node (described by a leafGTE element). In case 
				it s a non-terminal node (nodeGTE element) the computation continues as described above. In case it is a 
				terminal leaf node the decision is made according the inside attribute of the leafGTE element. If the value of 
				the attribute is true, the event is considered to be in the gate. If the value of the attribute is false, the event is 
				considered to be out of the gate.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="gating:AbstractGate">
				<sequence>
					<element name="rootNode" type="gating:TreeNode" id="rootNode" />
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<complexType name="BooleanGate" id="BooleanGate">
		<annotation>
			<documentation xml:lang="en">
				Type of the BooleanGate element:
				
				A Boolean gate is a gate created based on any other gates using basic Boolean logic operators, i.e., AND, OR, and NOT 
				operators. NOT is considered as a unary operator. The arity of AND and OR operators is considered to be n, n greater 
				or equal 2. The operators have the following semantic:
				
				a)	Consider a gate G created as NOT(G1). An event e is in the gate G if and only if e is not in the gate G1.
				b)	Consider a gate G created as AND(G1, G2, …, Gn), n greater or equal 2.  An event e is in the gate G 
					if and only if e is in all gates Gi.
				c)	Consider a gate G created as OR(G1, G2, …, Gn), n greater or equal 2.  An event e is in the gate G if 
					and only if e is in any of the gates Gi.
				
				Note that the XOR gate is not explicitly supported; however, a XOR gate can be created combining the basic operators, e.g., 
				XOR(A, B) = OR(AND(A, NOT(B)), AND(NOT(A), B)).
				
				There are two possibilities how to specify the operands of Boolean operations. 
				
				a)	It is possible to use the gateReference element with a ref attribute that specifies another gate by 
					its id (the id attribute of a gate defined somewhere else in the file). A gate with the referenced id shall 
					be present in the file, otherwise it is considered as a wrong gate definition. 
				b)	An operand of a Boolean operation may be defined directly within the And/Or/Not element. The same 
					rules apply as while defining any other gate within the XML file on the top level as described by this document.
			</documentation>
		</annotation>	
		<complexContent>
			<extension base="gating:AbstractGate">
				<sequence>
					<choice>
						<element name="and" type="gating:TwoAndMoreOperands-BoolGate" id="and" />
						<element name="or" type="gating:TwoAndMoreOperands-BoolGate" id="or" />
						<element name="not" type="gating:OneOperand-BoolGate" id="not" />
					</choice>
				</sequence>
			</extension>
		</complexContent>
	</complexType>


	<complexType name="Dimension" id="Dimension">
		<attribute name="parameter" type="commontypes:NonEmptyString" use="required" />
	</complexType>

	<complexType name="RectangleGateDimension" id="RectangleGateDimension">
		<complexContent>
			<extension base="gating:Dimension">
				<attribute name="min" type="double" use="optional" id="min" />
				<attribute name="max" type="double" use="optional" id="max" />
			</extension>
		</complexContent>
	</complexType>

	<complexType name="Point" id="Point">
		<sequence>
			<element name="coordinate" type="gating:Coordinate" maxOccurs="unbounded" id="coordinate" />
		</sequence>
	</complexType>

	<complexType name="Point2D" id="Point2D">
		<complexContent>
			<restriction base="gating:Point">
				<sequence>
					<element name="coordinate" type="gating:Coordinate" minOccurs="2" maxOccurs="2" />	
				</sequence>
			</restriction>
		</complexContent>
	</complexType>
	
	<complexType name="Coordinate" id="Coordinate">
		<attribute name="value" type="double" use="required" id="value" />
	</complexType>

	<group name="BoolGateOperands" id="BoolGateOperands">
		<annotation>
			<documentation xml:lang="en">
				An operand of a Boolean gate can be specified as gateReference ref="#id attribute of another gate"
				or a complete specification of another gate.
			</documentation>
		</annotation>
		<choice>
			<element name="gateReference" type="gating:GateReference" id="gateReference" />
			<group ref="gating:Gates"/>
		</choice>
	</group>
	
	<complexType name="TwoAndMoreOperands-BoolGate" id="TwoAndMoreOperands-BoolGate">
		<annotation>
			<documentation xml:lang="en">
				Boolean Gates with two or more parameters (AND and OR gates).
			</documentation>
		</annotation>
		<sequence minOccurs="2" maxOccurs="unbounded">
			<group ref="gating:BoolGateOperands" />
		</sequence>
	</complexType>
	
	<complexType name="OneOperand-BoolGate" id="OneOperand-BoolGate">
		<annotation>
			<documentation xml:lang="en">
				Boolean Gates with exactly one operand (NOT gate).	
			</documentation>
		</annotation>
		<sequence>
			<group ref="gating:BoolGateOperands" />
		</sequence>
	</complexType>

	<complexType name="GateReference" id="GateReference">
		<annotation>
			<documentation xml:lang="en">
				Type of an Reference to another (already defined) Gate.
				- Attributes: ref specifying another gate (referencing its id) 	
			</documentation>
		</annotation>
		<attribute name="ref" type="IDREF" use="required" id="ref" />
	</complexType>
	
	
	<complexType name="TreeNode" id="TreeNode">
		<annotation>
			<documentation xml:lang="en">
				For a given event the channel value of the specified parameter is compared against the threshold. If it is less than 
				the threshold, then the decision is passed to the “Less Than” branch; if the value is greater or equal to the threshold, 
				then the decision is passed to the “Greater Than or Equal” branch. 
				
				Both the “Less Than” and the “Greater Than or Equal” nodes may be either a non-terminal node 
				or a terminal leaf. In case it is a non-terminal node the computation continues. In case it is a terminal leaf node 
				the decision is made according the inside attribute of the "leaf" element. 
			</documentation>
		</annotation>
		<sequence>
			<group ref="gating:LessThan-TreeBranch"/>
			<group ref="gating:GreaterThanOrEqual-TreeBranch"/>
		</sequence>
		<attribute name="parameter" type="commontypes:NonEmptyString" use="required" />
		<attribute name="threshold" type="double" use="required" id="threshold" />
	</complexType>
	
	<group name="LessThan-TreeBranch" id="LessThan-TreeBranch">
		<choice>
			<element name="nodeLT" type="gating:TreeNode" id="nodeLT" />
			<element name="leafLT" type="gating:LeafNode" id="leafLT" />
		</choice>
	</group>
	
	<group name="GreaterThanOrEqual-TreeBranch" id="GreaterThanOrEqual-TreeBranch">
		<choice>
			<element name="nodeGTE" type="gating:TreeNode" id="nodeGTE" />
			<element name="leafGTE" type="gating:LeafNode" id="leafGTE" />
		</choice>
	</group>
	
	<complexType name="LeafNode" id="LeafNode">
		<attribute name="inside" type="boolean" use="required" id="inside" />
	</complexType>

</schema>