<?xml version="1.0" encoding="UTF-8"?>
<schema 
	xmlns="http://www.w3.org/2001/XMLSchema"
	xmlns:transforms="http://www.isac-net.org/std/Transformation-ML/v1.0/"
	xmlns:commontypes="http://www.isac-net.org/std/common-types/v1.0/"
	xmlns:mml="http://www.w3.org/1998/Math/MathML"
	targetNamespace="http://www.isac-net.org/std/Transformation-ML/v1.0/"
	elementFormDefault="qualified" attributeFormDefault="qualified"
	version="1.0">
	
	<import namespace="http://www.isac-net.org/std/common-types/v1.0/" schemaLocation="../../common/CommonTypes.v1.0.xsd"/>
	<import namespace="http://www.w3.org/1998/Math/MathML" schemaLocation="../mathml2/mathml2.xsd"/>
	
	<element name="Transformation-ML" type="transforms:Transformation-ML">
		<annotation>
			<documentation xml:lang="en">
				The main element of the Transformation-ML XML file 
				
				While analyzing flow cytometry data on computer, various parameter transformations are being performed to provide 
				user-friendly visualization of FCM data. If data are viewed using a transformed parameter (i.e., on a transformed scale) 
				and a gate is created, it is important to record not only the gate but also the transformation.
				
				The work is supported by NIH R01 EB-5034.
			</documentation>
		</annotation>
	</element>
	
	<complexType name="Transformation-ML" id="Transformation-ML">
		<annotation>
			<documentation xml:lang="en">
				The type of the main Transformation-ML element.
				
				The transformation element may be used to create new parameters as transformation of 
				original parameters from FCS files (or from other parameters that have been created by another 
				transformation already). The transformation element prescribes the transformation 
				and assigns a new name for the created parameter in order to enable its usage in further definition of gates.
			</documentation>
		</annotation>
		<sequence>
			<element name="transformation" id="transformation" type="transforms:ParameterTransformation" minOccurs="1" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	
	<complexType name="ParameterTransformation">
		<annotation>
			<documentation xml:lang="en">
				Parameter transformation mechanism creates new parameters based on existing ones. It specifies transformations 
				that were performed while creating the new parameter. More transformations may be combined as well as more 
				source parameters may be used to create a new single parameter. The new parameter becomes a new name that 
				shall be used for reference purposes from any of the gates within the file.
				
				The specification includes 2 types of transformations:
				
				a)	a pre-defined transformation,
				b)	a universal transformation based on MathML version 2.0 specification.
			</documentation>
		</annotation>
		<choice>
			<element name="pre-defined" type="transforms:Pre-defined"/>
			<element name="universal" type="transforms:Universal"/>
		</choice>
		<attribute name="newName" type="commontypes:NonEmptyString" use="required"/>
	</complexType>

	<complexType name="Pre-defined">
		<annotation>
			<documentation xml:lang="en">
				The following pre-defined transformations are specified: linear, quadratic, natural logarithm, 
				logarithm with a specified base (10 by default), hyperlog, bi-exponential, logicle, and split-scale.
			</documentation>
		</annotation>
		<choice>
			<element name="linear" type="transforms:Linear"/>
			<element name="quadratic" type="transforms:Quadratic"/>
			<element name="ln" type="transforms:Ln"/>
			<element name="log" type="transforms:Log"/>
			<element name="hyperlog" type="transforms:Hyperlog"/>
			<element name="bi-exponential" type="transforms:Bi-exponential"/>
			<element name="logicle" type="transforms:Logicle"/>
			<element name="split-scale" type="transforms:Split-scale"/>
		</choice>
	</complexType>
	
	<complexType name="AbstractTransformation" abstract="true">
		<annotation>
			<documentation xml:lang="en">
				Abstract type to be used as a common parent of pre-defined as well as universal transformations.
			</documentation>
		</annotation>
	</complexType>
	
	
	<complexType name="AbstractPredefinedTransformation" abstract="true">
		<annotation>
			<documentation xml:lang="en">
				Abstract type to be used as a common parent of all types of pre-defined transformations.
				
				Attributes:
				- parameter represents the name (or number) of the parameter to be transformed
			</documentation>
		</annotation>
		<complexContent>
			<extension base="transforms:AbstractTransformation">
				<attribute name="parameter" type="commontypes:NonEmptyString" use="required" />				
			</extension>
		</complexContent>
	</complexType>
	

	<complexType name="Linear">
		<annotation>
			<documentation xml:lang="en">
				Linear transformation: 
				new parameter = a * parameter + b			
			</documentation>
		</annotation>
		<complexContent>
			<extension base="transforms:AbstractPredefinedTransformation">
				<attribute name="a" type="double" use="required"/>
				<attribute name="b" type="double" use="required"/>
			</extension>
		</complexContent>
	</complexType>

	
	<complexType name="Quadratic">
		<annotation>
			<documentation xml:lang="en">
				Quadratic transformation: 
				new parameter = a * parameter^2 + b * parameter + c
			</documentation>
		</annotation>
		<complexContent>
			<extension base="transforms:AbstractPredefinedTransformation">
				<attribute name="a" type="double" use="required"/>
				<attribute name="b" type="double" use="required"/>
				<attribute name="c" type="double" use="required"/>
			</extension>
		</complexContent>
	</complexType>

	
	<complexType name="Abstract-r-d-Transformation" abstract="true">
		<annotation>
			<documentation xml:lang="en">
				Abstract type to be used as a common parent for pre-defined transformations using
				- the r constant as the analog-to-digital resolution
				- the d constant asthe number of decades for the dynamic range of parameter
			</documentation>
		</annotation>
		<complexContent>
			<extension base="transforms:AbstractPredefinedTransformation">
				<attribute name="r" type="commontypes:PositiveDouble" use="required"/>
				<attribute name="d" type="commontypes:PositiveDouble" use="required"/>
			</extension>
		</complexContent>
	</complexType>

	
	<complexType name="Ln">
		<annotation>
			<documentation xml:lang="en">
				Natural log transformation: 
				
				for parameter greater than or equal 1: 
					new parameter = ln(parameter) * r/d 
				for parameter les than 1: 
					new parameter = 0
					
				the constants r and d are inherited from the Abstract-r-d-Transformation type
				the base of the logarithm is e = 2.71828 18284 59045 23536 02874 7135... 			
			</documentation>
		</annotation>
		<complexContent>
			<extension base="transforms:Abstract-r-d-Transformation" />
		</complexContent>
	</complexType>

	
	<complexType name="Log">
		<annotation>
			<documentation xml:lang="en">
				Log transformation:
				
				for parameter greater than or equal 1: 
					new parameter = log(parameter) * r/d 
				for parameter les than 1: 
					new parameter = 0
					
				the constants r and d are inherited from the Abstract-r-d-Transformation type
				the base of the logarithm may be specified in the logbase attribute, default value is 10
			</documentation>
		</annotation>
		<complexContent>
			<extension base="transforms:Abstract-r-d-Transformation">
				<attribute name="logbase" type="commontypes:DoubleGreaterThanOne" use="optional" default="10"/>				
			</extension>
		</complexContent>
	</complexType>


	<complexType name="Hyperlog">
		<annotation>
			<documentation xml:lang="en">
				HyperLog (HL) transformation as described in:
				- Bagwell, C.B., Hyperlog-a flexible log-like transform for negative, zero, and positive valued data. 
				Cytometry A, 2005. 64(1): p. 34-42. http://www3.interscience.wiley.com/cgi-bin/abstract/109921021/ABSTRACT
				
				HL(parameter) = root(EH(y,b) - parameter), where
				- if(y greater or equal 0) then EH(y,b,d,r) = 10^{yd/r}+by*d/r-1
				- if(y less than 0) then EH(y,b,d,r) =-10^{-yd/r}+by*d/r+1
				
				the constants r and d are inherited from the Abstract-r-d-Transformation type
			</documentation>
		</annotation>
		<complexContent>
			<extension base="transforms:Abstract-r-d-Transformation">
				<attribute name="b" type="commontypes:PositiveDouble" use="required"/>				
			</extension>
		</complexContent>
	</complexType>


	<complexType name="Bi-exponential">
		<annotation>
			<documentation xml:lang="en">
				A Bi-exponential (BiEx) transformation
				
				The BiEx function is defined as follows:
				- BiE(parameter) = root(B(y, a, b, c, d, f) - parameter), where root() is a standard root finding algorithm 
				(e.g., Newton's method) that finds y such that B(y) = parameter. 
				
				The B function is defined as follows:
				- B(y, a, b, c, d, f) = a * e^(b * y) - c * e^(-d * y) + f,
				where the operands are specified by the a, b, c, d, f, and parameter attributes of the biexponential element.
				e is the base of the natural logarithm, i.e., e = 2.71828 18284 59045 23536 02874 7135... 
			</documentation>
		</annotation>
		<complexContent>
			<extension base="transforms:AbstractPredefinedTransformation">
				<attribute name="a" type="commontypes:PositiveDouble" use="required"/>
				<attribute name="b" type="commontypes:PositiveDouble" use="required"/>
				<attribute name="c" type="commontypes:PositiveDouble" use="required"/>
				<attribute name="d" type="commontypes:PositiveDouble" use="required"/>
				<attribute name="f" type="double" use="required"/>
			</extension>
		</complexContent>
	</complexType>

	
	<complexType name="Logicle">
		<annotation>
			<documentation xml:lang="en">
				Logicle transformations
				
				Logicle transformations create a subset of bi-exponential transformation functions 
				that are especially suitable for using in flow cytometry. Thus they can be dimensionized 
				by the a, b, c, d, and f introduced for bi-exponential transformations in general; however, 
				less dimensions is sufficient.  
				
				A logicle transformation function is defined as follows:
				- logical(parameter) = root(S(y, T, w, m) - parameter), where root() is a standard root finding 
				algorithm (e.g., Newton's method) that finds y such that S(y) = parameter.
				
				The S function is defined as follows:
				- if(y = w):		S(y, T, w, m) = Te^(-(m-w)) * (e^(y-w) - p^2 * e^(-(y-w)/p) + p^2 - 1),
				- otherwise:		S(y, T, w, m) = - S(w - y, T, w, m),
				where the dimensions T, w, m and parameter are specified by the T, w, m and parameter attributes of the logicle element. 
				T is the top of scale data value, e.g., 10 000 for common 4 decade data or 262,144 (=218) for an 18 bit data range, 
				w is the width of the negative data range and the range of linearized data in natural logarithm units, w >= 0, 
				m is breadth of the display in natural logarithm units, e.g., for a 4.5 decade display range m = 4.5*ln(10) = 10.3616329 
				
				p is introduced for compactness; it and w together represent a single adjustable transformation parameter, 
				w = 2p*ln(p)/(p+1). 
				For w >= 0, the function is continuous and has a derivative, so p can be found using bisection method or even 
				faster using Newton's method.
				
				e is the base of the natural logarithm, i.e., e = 2.71828 18284 59045 23536 02874 7135... 
			</documentation>
		</annotation>
		<complexContent>
			<extension base="transforms:AbstractPredefinedTransformation">
				<attribute name="T" type="commontypes:PositiveDouble" use="required"/>
				<attribute name="w" type="commontypes:NonNegativeDouble" use="required"/>
				<attribute name="m" type="commontypes:PositiveDouble" use="required"/>		
			</extension>
		</complexContent>
	</complexType>


	<complexType name="Split-scale">
		<annotation>
			<documentation xml:lang="en">
				A split scale transformation
				
				The split scale transformation is defined as follows:
				if(parameter less then t):	split(parameter) = a * parameter + b
				otherwise:			split(parameter) = log10 (c * parameter) * r/d
				
				The split scale transformation is specified by the split element with the following attributes:
				
				parameter		The FCS parameter the transformation is applied to.
				maxValue		Maximum value the transformation is applied to, e.g., 262144.
				transitionChannel	Where to split the linear vs. logarithmical transformation, e.g., a quarter of the 
							maximum value after the transformation	(e.g., 64 in case the max value 
							after the transformation is 256).
				r			Range of the logarithmical display, i.e., "maxChannel - transitionChannel" considering the
							maxChannel as the maximum value to be obtained after the transformation.

				The constants t, a, b, c, maxChannel, and d (needed to perform the transformation) are calculated as follows:
				(le =  log10(e) = approx. 0.434294482)
				
				maxChannel = r + transitionChannel 
					(maxChannel is the maximum value to be obtained after the transformation , e.g., 256 = 192 + 64)
				b = transitionChannel / 2
				d = 2*le*r / transitionChannel
				t = 10^(-2*le*r / transitionChannel + log10(maxValue))
				a = transitionChannel / (2*t)
				c = (10^((a*t + b) * d / r)) / t
			</documentation>
		</annotation>
		<complexContent>
			<extension base="transforms:AbstractPredefinedTransformation">
				<attribute name="r" type="commontypes:PositiveDouble" use="required"/>
				<attribute name="maxValue" type="commontypes:PositiveDouble" use="required"/>
				<attribute name="transitionChannel" type="commontypes:NonNegativeDouble" use="required"/>
			</extension>
		</complexContent>
	</complexType>


	<complexType name="Universal">
		<annotation>
			<documentation xml:lang="en">
				The universal transformations enable to perform an unlimited number and types of transformations. To specify 
				such transformations we use the Mathematical Markup Language (MathML) W3C specification. 
				
				MathML provides means for encoding the structure of mathematical expressions so that they can be displayed, 
				manipulated and shared over the World Wide Web. A carefully encoded MathML expression can be evaluated in a 
				computer algebra system, rendered in a Web browser, edited in a word processor, and printed on a printer. 
			</documentation>
		</annotation>
		<complexContent>
			<extension base="transforms:AbstractTransformation">
				<sequence>
					<element ref="mml:math" />
				</sequence>
				<attribute name="MathML-version" type="commontypes:NonEmptyString"  fixed="2.0" />
			</extension>
		</complexContent>
	</complexType>
	
</schema>